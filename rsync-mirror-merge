#!/bin/sh
#
# rsync-mirror-merge: rsync-mirror with merge a.k.a. delete all sources.
#
# Syntax:
#
#     rsync-mirror-merge [syntax is the same as rsync]
#
# Example:
#
#     rsync-mirror-merge ~/foo/ ~/bar/
#
# This script is based on `rsync-mirror` which sets these options:
#
#   -a, --archive           archive mode; same as -rlptgoD (no -H)
#   -H, --hard-links        preserve hard links
#   -O, --omit-dir-times    omit directories when preserving times
#   -x, --one-file-system   don't cross filesystem boundaries
#   -z, --compress          compress file data during the transfer
#   -i, --itemize-changes   output a change-summary for all updates
#
# This script also sets this option:
#
#   -u, --update            skip files that are newer on the receiver
#
# This script deliberately does not set these options:
#
#   -v, --verbose           increase verbosity
#   --partial               keep partially transferred files
#   --progress              show progress during transfer
#   --copy-links            transform symlink into referent file/dir
#   --safe-links            ignore symlinks that point outside the tree
#
# Reasons:
#
#   * We like --hard-links even though this is an expensive calculation.
#   * We only use --omit-dir-times because dir times fail on some systems.
#   * We do not use --partial because temp dirs fail on some systems.
#   * We want symlinks as-is, thus no --safe-links, --copy-links, etc.
#
# Known incompatibilities with rsync:
#
#   * each source arg must not start with a dash.
#   * there must be a destination arg.
#
# TODO: a source can start with a dash.
# TODO: one source arg and no destination arg is a noop.
# TODO: add special arg "--" which separates options and sources.
#
# Program: rsync-mirror-merge
# Version: 2.0.0
# Created: 2015-01-25
# Updated: 2016-02-09
# License: GPL
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##
set -euf
rsync -aHuOxzviu "$@"

## Staples ##
out () { printf %s\\n "$*" ; }
err () { >&2 printf %s\\n "$*" ; }

##
# Remove all sources that are normal directories and normal files.
#
# This implementation is fine for typical cases but not corner cases.
#
# This implementation steps backwards through the args:
#
#   * Skip the last arg which must be the destination.
#     TODO: one source arg and no destination arg is a noop.
#
#   * If the arg starts with a dash, stop processing.
#     TODO: a source can start with a dash.
#
#   * If the arg is a normal file or directory, remove it.
#
#   * Otherwise print an error message then break.
##

i=$(($#-1))
while [ "$i" -ge 0 ]; do
    x="${!i}"
    case "$x" in
        --) break ;;
        -*) break ;;
        *) if [ -f "$x" -o -d "$x" ]; then
               rm -fr "$x"
           else
               err "Cannot remove arg because it is not a normal file or directory: $x"
	       break
           fi
    esac
    true $((i=i-1))
done
